package com.github.jaaa.sort.tiny;

import com.github.jaaa.Swap;
import com.github.jaaa.CompareSwapAccess;

import static java.lang.Math.subtractExact;

// REFERENCES
// ----------
// .. [1] "Smallest and fastest sorting networks for a given number of inputs"
//         Bert Dobbelaere
//         http://users.telenet.be/bertdobbelaere/SorterHunter/sorting_networks.html
//         https://github.com/bertdobbelaere/SorterHunter

public interface NetSortV2Access extends CompareSwapAccess
{
  static final byte[][] SORTING_NETWORKS = {
    {},
    {},
    { 0, 1 },
    { 0, 2,   0, 1,   1, 2 },
    { 0, 2,   1, 3,   0, 1,   2, 3,   1, 2 },
    { 0, 3,   1, 4,   0, 2,   1, 3,   0, 1,   2, 4,   1, 2,   3, 4,   2, 3 },
    { 0, 5,   1, 3,   2, 4,   1, 2,   3, 4,   0, 3,   2, 5,   0, 1,   2, 3,   4, 5,   1, 2,   3, 4 },
    { 0, 6,   2, 3,   4, 5,   0, 2,   1, 4,   3, 6,   0, 1,   2, 5,   3, 4,   1, 2,   4, 6,   2, 3,   4, 5,   1, 2,   3, 4,   5, 6 },
    { 0, 2,   1, 3,   4, 6,   5, 7,   0, 4,   1, 5,   2, 6,   3, 7,   0, 1,   2, 3,   4, 5,   6, 7,   2, 4,   3, 5,   1, 4,   3, 6,   1, 2,   3, 4,   5, 6 },
    { 0, 3,   1, 7,   2, 5,   4, 8,   0, 7,   2, 4,   3, 8,   5, 6,   0, 2,   1, 3,   4, 5,   7, 8,   1, 4,   3, 6,   5, 7,   0, 1,   2, 4,   3, 5,   6, 8,   2, 3,   4, 5,   6, 7,   1, 2,   3, 4,   5, 6 },
    { 0, 8,   1, 9,   2, 7,   3, 5,   4, 6,   0, 2,   1, 4,   5, 8,   7, 9,   0, 3,   2, 4,   5, 7,   6, 9,   0, 1,   3, 6,   8, 9,   1, 5,   2, 3,   4, 8,   6, 7,   1, 2,   3, 5,   4, 6,   7, 8,   2, 3,   4, 5,   6, 7,   3, 4,   5, 6 },
    { 0, 9,   1, 6,   2, 4,   3, 7,   5, 8,   0, 1,   3, 5,   4,10,   6, 9,   7, 8,   1, 3,   2, 5,   4, 7,   8,10,   0, 4,   1, 2,   3, 7,   5, 9,   6, 8,   0, 1,   2, 6,   4, 5,   7, 8,   9,10,   2, 4,   3, 6,   5, 7,   8, 9,   1, 2,   3, 4,   5, 6,   7, 8,   2, 3,   4, 5,   6, 7 },
    { 0, 8,   1, 7,   2, 6,   3,11,   4,10,   5, 9,   0, 1,   2, 5,   3, 4,   6, 9,   7, 8,  10,11,   0, 2,   1, 6,   5,10,   9,11,   0, 3,   1, 2,   4, 6,   5, 7,   8,11,   9,10,   1, 4,   3, 5,   6, 8,   7,10,   1, 3,   2, 5,   6, 9,   8,10,   2, 3,   4, 5,   6, 7,   8, 9,   4, 6,   5, 7,   3, 4,   5, 6,   7, 8 },
    { 0,12,   1,10,   2, 9,   3, 7,   5,11,   6, 8,   1, 6,   2, 3,   4,11,   7, 9,   8,10,   0, 4,   1, 2,   3, 6,   7, 8,   9,10,  11,12,   4, 6,   5, 9,   8,11,  10,12,   0, 5,   3, 8,   4, 7,   6,11,   9,10,   0, 1,   2, 5,   6, 9,   7, 8,  10,11,   1, 3,   2, 4,   5, 6,   9,10,   1, 2,   3, 4,   5, 7,   6, 8,   2, 3,   4, 5,   6, 7,   8, 9,   3, 4,   5, 6 },
    { 0, 6,   1,11,   2,12,   3,10,   4, 5,   7,13,   8, 9,   1, 2,   3, 7,   4, 8,   5, 9,   6,10,  11,12,   0, 4,   1, 3,   5, 6,   7, 8,   9,13,  10,12,   0, 1,   2, 9,   3, 7,   4,11,   6,10,  12,13,   2, 5,   4, 7,   6, 9,   8,11,   1, 2,   3, 4,   6, 7,   9,10,  11,12,   1, 3,   2, 4,   5, 6,   7, 8,   9,11,  10,12,   2, 3,   4, 7,   6, 9,  10,11,   4, 5,   6, 7,   8, 9,   3, 4,   5, 6,   7, 8,   9,10 },
    { 1, 2,   3,10,   4,14,   5, 8,   6,13,   7,12,   9,11,   0,14,   1, 5,   2, 8,   3, 7,   6, 9,  10,12,  11,13,   0, 7,   1, 6,   2, 9,   4,10,   5,11,   8,13,  12,14,   0, 6,   2, 4,   3, 5,   7,11,   8,10,   9,12,  13,14,   0, 3,   1, 2,   4, 7,   5, 9,   6, 8,  10,11,  12,13,   0, 1,   2, 3,   4, 6,   7, 9,  10,12,  11,13,   1, 2,   3, 5,   8,10,  11,12,   3, 4,   5, 6,   7, 8,   9,10,   2, 3,   4, 5,   6, 7,   8, 9,  10,11,   5, 6,   7, 8 },
    { 0,13,   1,12,   2,15,   3,14,   4, 8,   5, 6,   7,11,   9,10,   0, 5,   1, 7,   2, 9,   3, 4,   6,13,   8,14,  10,15,  11,12,   0, 1,   2, 3,   4, 5,   6, 8,   7, 9,  10,11,  12,13,  14,15,   0, 2,   1, 3,   4,10,   5,11,   6, 7,   8, 9,  12,14,  13,15,   1, 2,   3,12,   4, 6,   5, 7,   8,10,   9,11,  13,14,   1, 4,   2, 6,   5, 8,   7,10,   9,13,  11,14,   2, 4,   3, 6,   9,12,  11,13,   3, 5,   6, 8,   7, 9,  10,12,   3, 4,   5, 6,   7, 8,   9,10,  11,12,   6, 7,   8, 9}
  };

  public default void netSortV2( int from, int until )
  {
    if( from > until ) throw new IllegalArgumentException();
    int len = subtractExact(until,from);
    if( len >= SORTING_NETWORKS.length ) throw new IllegalArgumentException();

    if( len <= 1 ) return;
    if( len <  4 ) {
      // hard-coded insertion sort
      if(           compare(from+1, from+0) < 0 )   swap(from+0,from+1);
      if( len==3 && compare(from+2, from+1) < 0 ) { swap(from+1,from+2);
      if(           compare(from+1, from+0) < 0 )   swap(from+0,from+1); }
      return;
    }

    byte[] order = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
             net = SORTING_NETWORKS[len];

    assert net.length%2 == 0;
    for( int k=0; k < net.length; )
    {
      int i=net[k++],
          j=net[k++];

      int c = compare(from+i, from+j);
      if( c > 0 || c==0 && order[i] > order[j] ) {
        Swap.swap(order,i,j);
        swap(from+i, from+j);
      }
    }
  }
}
